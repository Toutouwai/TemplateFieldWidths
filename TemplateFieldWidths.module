<?php namespace ProcessWire;

/**
 *
 * Template Field Widths
 *
 * @author Robin Sallis
 *
 * ProcessWire 3.x
 * Copyright (C) 2011 by Ryan Cramer
 * Licensed under GNU/GPL v2, see LICENSE.TXT
 *
 * http://www.processwire.com
 * http://www.ryancramer.com
 *
 */

class TemplateFieldWidths extends WireData implements Module, ConfigurableModule {

	/**
	 * Module information
	 */
	public static function getModuleInfo() {
		return array(
			'title' => 'Template Field Widths',
			'version' => '0.2.0',
			'summary' => 'Quickly set the widths of inputfields in a template, Repeater field, or Repeater Matrix field.',
			'author' => 'Robin Sallis',
			'icon' => 'arrows-h',
			'autoload' => 'template=admin',
			'requires' => 'ProcessWire>=3.0.187, PHP>=5.4.0'
		);
	}

	/**
	 * Ready
	 */
	public function __construct() {
		parent::__construct();
		$this->tfw_collapsed = 1;
		$this->field_identifier = 'name';
	}

	/**
	 * Ready
	 */
	public function ready() {
		$this->addHookAfter('ProcessTemplate::buildEditForm', $this, 'addProcessTemplateControls');
		$this->addHookAfter('FieldtypeRepeater::getConfigInputfields', $this, 'addProcessFieldControls');
		$this->addHookBefore('ProcessTemplate::executeSave', $this, 'beforeTemplateSave');
		$this->addHookBefore('ProcessField::executeSave', $this, 'beforeFieldSave');
	}

	/**
	 * Load CSS and JS assets
	 */
	protected function loadAssets() {
		$config = $this->wire()->config;
		$info = $this->getModuleInfo();
		$version = $info['version'];
		$config->styles->add($config->urls->$this . "{$this}.css?v=$version");
		$config->scripts->add($config->urls->$this . "{$this}.js?v=$version");
	}

	/**
	 * Return fields width controls markup
	 *
	 * @param array|Fieldgroup $fields
	 * @param Fieldgroup $fieldgroup
	 */
	protected function fieldWidthsMarkup($fields, $fieldgroup, $matrix_type = null) {
		$markup = '';
		foreach($fields as $field) {
			// Close fieldset
			if($field->type == 'FieldtypeFieldsetClose') {
				$markup .= "</div></div>";
				continue;
			}
			// Get field in template or matrix type context
			if($matrix_type) {
				$f = $fieldgroup->getFieldContext($field, "matrix$matrix_type");
			} else {
				$f = $fieldgroup->getFieldContext($field);
			}
			$col_width = $f->columnWidth ?: 100;
			$is_fieldset = in_array($field->type, ['FieldtypeFieldsetOpen', 'FieldtypeFieldsetGroup']);
			// Use hyphens to separate pieces in the id/name attribute because PW field names cannot include hyphens
			// This lets us explode on hyphens later to get the original pieces
			$id = 'tfw-' . $f->name;
			if($matrix_type) $id .= "-$matrix_type";
			$orig_width_markup = '';
			if($this->show_original_width) {
				$orig_width = $field->columnWidth ?: 100;
				$orig_width_markup = "<span class='orig-width'>{$orig_width}%</span>";
			}
			$primary_identifier = $this->field_identifier === 'name' ? $f->name : ($f->label ?: $f->name) ;
			if($is_fieldset) $primary_identifier = "<strong>$primary_identifier</strong>";
			$secondary_identifier = $this->field_identifier === 'name' ? $f->label : $f->name;
			$markup .= <<<EOT
<div class='tfw-item' style='width:{$col_width}%'>
	<label>
		<span class='tfw-label' title='$secondary_identifier'>$primary_identifier</span>
		<div class='tfw-input'>
			<input id='$id' name='$id' type='number' min='10' max='100' value='$col_width'>{$orig_width_markup}
		</div>
</label>
EOT;
			if($is_fieldset) {
				// Open fieldset
				$markup .= "<div class='tfw-fieldset'>";
			} else {
				$markup .= "</div>";
			}
		}
		return $markup;
	}

	/**
	 * Add controls to ProcessTemplate
	 *
	 * @param HookEvent $event
	 */
	protected function addProcessTemplateControls(HookEvent $event) {
		/* @var InputfieldForm $form */
		$form = $event->return;
		$template = $this->getTemplate();
		$fieldgroup = $template->fieldgroup;
		$fg_fields = $form->getChildByName('fieldgroup_fields');
		// No need to continue if template gets its fields from a different fieldgroup
		if(!$fg_fields) return;

		// Tabs array
		$tabs = [];
		$content_tab_name = 'content';
		$content_tab_label = $template->tabContent ?: $this->_('Content');
		$tab_name = $content_tab_name;
		$tab_label = $content_tab_label;
		foreach($fieldgroup as $field) {
			if($field->type == 'FieldtypeFieldsetTabOpen' || ($field->type == 'FieldtypeFieldsetGroup' && $field->useTabs === 1)) {
				$tab_name = $field->name;
				$f = $fieldgroup->getFieldContext($field);
				$tab_label = $f->label ?: $tab_name;
				continue;
			}
			if($field->type == 'FieldtypeFieldsetClose' && $field->name == "{$tab_name}_END") {
				$tab_name = $content_tab_name;
				$tab_label = $content_tab_label;
				continue;
			}
			$tabs[$tab_name]['label'] = $tab_label;
			$tabs[$tab_name]['fields'][] = $field;
		}

		// Hidden input to record field opened/closed state
		$val = (int) !$this->tfw_collapsed;
		$markup = "<input type='hidden' class='tfw-open' name='tfw_open' value='$val'>";

		// Open container
		$markup .= "<div class='tfw-container'>";

		// Tabs
		$markup .= "<ul class='tfw-tabs'>";
		foreach($tabs as $tab_name => $tab_data) {
			$active = $tab_name === 'content' ? ' active' : '';
			$markup .= "<li class='tfw-tab{$active}' data-tab='tfw-{$tab_name}'>{$tab_data['label']}</li>";
		}
		$markup .= "</ul>";

		// Tab content
		$markup .= "<ul class='tfw-tabs-content'>";
		foreach($tabs as $tab_name => $tab_data) {
			$active = $tab_name === 'content' ? ' active' : '';
			$markup .= "<li id='tfw-{$tab_name}' class='tfw-tab-content{$active}'>";
			$markup .= "<div class='tfw-items-wrap'>";
			$markup .= $this->fieldWidthsMarkup($tab_data['fields'], $fieldgroup);
			$markup .= "</div>";
			$markup .= "</li>";
		}
		$markup .= "</ul>";

		// Close container
		$markup .= "</div>";

		/* @var InputfieldMarkup $f */
		$f = $this->wire()->modules->get('InputfieldMarkup');
		$f->name = 'tfw_widths';
		$f->wrapAttr('data-tfw', 1);
		$f->label = $this->_('Field widths');
		$f->icon = 'arrows-h';
		$f->value = $markup;
		if($this->tfw_collapsed) $f->collapsed = Inputfield::collapsedYes;
		$form->insertAfter($f, $fg_fields);

		// Load CSS and JS assets
		$this->loadAssets();
	}

	/**
	 * Add controls to ProcessField (Repeater)
	 *
	 * @param HookEvent $event
	 */
	protected function addProcessFieldControls(HookEvent $event) {
		$field = $event->arguments(0);
		$wrapper = $event->return;

		// If Repeater or FieldsetPage
		if(in_array($field->type, ['FieldtypeRepeater', 'FieldtypeFieldsetPage'])) {

			// Get the Repeater fields config field
			$repeater_fields_config = $wrapper->getChildByName('repeaterFields');
			if(!$repeater_fields_config) return;

			// Get template of Repeater
			/** @var Template $template */
			$template = $field->type->getRepeaterTemplate($field);
			$fieldgroup = $template->fieldgroup;

			// Hidden input to record field opened/closed state
			$val = (int) !$this->tfw_collapsed;
			$markup = "<input type='hidden' class='tfw-open' name='tfw_open' value='$val'>";

			// Open container
			$markup .= "<div class='tfw-items-wrap'>";
			$markup .= $this->fieldWidthsMarkup($fieldgroup, $fieldgroup);
			$markup .= "</div>";

			/* @var InputfieldMarkup $f */
			$f = $this->wire()->modules->get('InputfieldMarkup');
			$f->name = 'tfw_widths';
			$f->wrapAttr('data-tfw', 1);
			$f->label = $this->_('Field widths');
			$f->icon = 'arrows-h';
			$f->value = $markup;
			if($this->tfw_collapsed) $f->collapsed = Inputfield::collapsedYes;
			$wrapper->insertAfter($f, $repeater_fields_config);

			// Load CSS and JS assets
			$this->loadAssets();

		}
		// If Repeater Matrix
		elseif($field->type == 'FieldtypeRepeaterMatrix') {

			// Return early if RepeaterMatrix < v5 which introduced getMatrixTypesInfo() method
			if(!method_exists($field->type, 'getMatrixTypesInfo')) return;

			/** @var Template $template */
			$template = $field->type->getMatrixTemplate($field);
			$matrix_info = $field->type->getMatrixTypesInfo();
			foreach($matrix_info as $type_name => $type_info) {
				// Get 'Fields' field in the matrix type config
				$m_fields = $wrapper->getChildByName("matrix{$type_info['type']}_fields");
				if(!$m_fields) continue;

				// Hidden input to record field opened/closed state
				$val = (int) !$this->tfw_collapsed;
				$markup = "<input type='hidden' class='tfw-open' name='tfw_open-{$type_info['type']}' value='$val'>";

				// Open container
				$markup .= "<div class='tfw-items-wrap'>";
				$markup .= $this->fieldWidthsMarkup($type_info['fields'], $template->fieldgroup, $type_info['type']);
				$markup .= "</div>";

				/* @var InputfieldMarkup $f */
				$f = $this->wire()->modules->get('InputfieldMarkup');
				$f->name = "tfw_widths_{$type_info['type']}";
				$f->wrapAttr('data-tfw', 1);
				$f->label = $this->_('Field widths');
				$f->icon = 'arrows-h';
				$f->value = $markup;
				if($this->tfw_collapsed) $f->collapsed = Inputfield::collapsedYes;
				$wrapper->insertAfter($f, $m_fields);
			}

			// Load CSS and JS assets
			$this->loadAssets();
		}
	}

	/**
	 * Get template from ID in $input
	 *
	 * @return Template|null
	 */
	protected function getTemplate() {
		$template_id = (int) $this->wire()->input->post('id') ?: (int) $this->wire()->input->get('id');
		return $this->wire()->templates->get($template_id);
	}

	/**
	 * Apply field widths
	 *
	 * @param Fieldgroup $fieldgroup
	 * @param array $data
	 * @param int|null $matrix_type
	 */
	protected function applyFieldWidths(Fieldgroup $fieldgroup, $data, $matrix_type = null) {
		foreach($data as $key => $value) {
			$pieces = explode('-', $key);
			$field_name = $pieces[1];
			$col_width = (int) $value;
			// Get field in template or matrix type context
			if($matrix_type) {
				$f = $fieldgroup->getFieldContext($field_name, "matrix$matrix_type");
			} else {
				$f = $fieldgroup->getFieldContext($field_name);
			}
			if(!$f || $f->columnWidth === $col_width || (!$f->columnWidth && $col_width === 100)) continue;
			$f->columnWidth = $col_width;
			if($matrix_type) {
				$this->wire()->fields->saveFieldgroupContext($f, $fieldgroup, "matrix$matrix_type");
			} else {
				$this->wire()->fields->saveFieldgroupContext($f, $fieldgroup);
			}
		}
	}

	/**
	 * Before ProcessTemplate::executeSave
	 *
	 * @param HookEvent $event
	 */
	protected function beforeTemplateSave(HookEvent $event) {
		// Return if widths inputfield was not open
		if(!$this->wire()->input->post('tfw_open')) return;
		$template = $this->getTemplate();
		if(!$template) return;
		$data = $this->wire()->input->post->find('tfw-*');
		$this->applyFieldWidths($template->fieldgroup, $data);
	}

	/**
	 * Before ProcessField::executeSave
	 *
	 * @param HookEvent $event
	 */
	protected function beforeFieldSave(HookEvent $event) {
		/** @var ProcessField $pf */
		$pf = $event->object;
		$field = $pf->getField();
		if(!$field) return;
		// If Repeater or FieldsetPage
		if(in_array($field->type, ['FieldtypeRepeater', 'FieldtypeFieldsetPage'])) {
			// Return if widths inputfield was not open
			if(!$this->wire()->input->post('tfw_open')) return;
			$template = $field->type->getRepeaterTemplate($field);
			$data = $this->wire()->input->post->find('tfw-*');
			$this->applyFieldWidths($template->fieldgroup, $data);
		}
		// If Repeater Matrix
		elseif($field->type == 'FieldtypeRepeaterMatrix') {
			$open_indicators = $this->wire()->input->post->find('tfw_open');
			foreach($open_indicators as $key => $value) {
				// Skip if widths inputfield was not open
				if(!$value) continue;
				$matrix_type = (int) substr($key, 9);
				$template = $field->type->getMatrixTemplate($field);
				$data = $this->wire()->input->post->find("tfw-*-$matrix_type");
				$this->applyFieldWidths($template->fieldgroup, $data, $matrix_type);
			}
		}
	}

	/**
	 * Config inputfields
	 *
	 * @param InputfieldWrapper $inputfields
	 */
	public function getModuleConfigInputfields($inputfields) {
		$modules = $this->wire()->modules;

		/* @var InputfieldRadios $f */
		$f = $modules->InputfieldRadios;
		$f_name = 'tfw_collapsed';
		$f->name = $f_name;
		$f->label = $this->_('Presentation of Template Field Widths field');
		$f->notes = $this->_('"Collapsed" recommended if you might also use core inputs for setting field widths.');
		$f->addOption(1, $this->_('Collapsed'));
		$f->addOption(0, $this->_('Open'));
		$f->optionColumns = 1;
		$f->value = $this->$f_name;
		$f->columnWidth = 40;
		$inputfields->add($f);

		/* @var InputfieldRadios $f */
		$f = $modules->InputfieldRadios;
		$f_name = 'field_identifier';
		$f->name = $f_name;
		$f->label = $this->_('Field primary identifier');
		$f->addOption('name', $this->_('Name'));
		$f->addOption('label', $this->_('Label'));
		$f->optionColumns = 1;
		$f->value = $this->$f_name;
		$f->columnWidth = 30;
		$inputfields->add($f);

		/* @var InputfieldCheckbox $f */
		$f = $modules->InputfieldCheckbox;
		$f_name = 'show_original_width';
		$f->name = $f_name;
		$f->label = $this->_("Show each field's original width");
		$f->checked = $this->$f_name === 1 ? 'checked' : '';
		$f->columnWidth = 30;
		$inputfields->add($f);

	}

}
