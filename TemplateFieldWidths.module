<?php namespace ProcessWire;

/**
 *
 * Template Field Widths
 *
 * @author Robin Sallis
 *
 * ProcessWire 3.x
 * Copyright (C) 2011 by Ryan Cramer
 * Licensed under GNU/GPL v2, see LICENSE.TXT
 *
 * http://www.processwire.com
 * http://www.ryancramer.com
 *
 */

class TemplateFieldWidths extends WireData implements Module, ConfigurableModule {

	/**
	 * Module information
	 */
	public static function getModuleInfo() {
		return array(
			'title' => 'Template Field Widths',
			'version' => '0.1.0',
			'summary' => 'Quickly set the widths of inputfields in a template.',
			'author' => 'Robin Sallis',
			'icon' => 'arrows-h',
			'autoload' => 'template=admin',
			'requires' => 'ProcessWire>=3.0.0'
		);
	}

	/**
	 * Ready
	 */
	public function __construct() {
		$this->tfw_collapsed = 1;
	}

	/**
	 * Ready
	 */
	public function ready() {
		$this->addHookAfter('ProcessTemplate::buildEditForm', $this, 'modifyEditForm');
		$this->addHookBefore('ProcessTemplate::executeSave', $this, 'applyWidths');
	}

	/**
	 * Add field to template edit form
	 *
	 * @param HookEvent $event
	 */
	protected function modifyEditForm(HookEvent $event) {
		/* @var InputfieldForm $form */
		$form = $event->return;
		$template = $this->getTemplate();
		$fieldgroup = $template->fieldgroup;

		$markup = "<div class='tfw-container'>";
		foreach($fieldgroup as $field) {
			// Close fieldset
			if($field->type == 'FieldtypeFieldsetClose') {
				$markup .= "</div></div>";
				continue;
			}
			$f = $fieldgroup->getFieldContext($field);
			$col_width = $f->columnWidth ?: 100;
			$is_fieldset = in_array($field->type, array('FieldtypeFieldsetOpen', 'FieldtypeFieldsetTabOpen', 'FieldtypeFieldsetGroup'));
			$id = 'tfw_' . $f->name;
			$field_name = $is_fieldset ? "<strong>$f->name</strong>" : $f->name;
			$markup .= "
<div class='tfw-item' style='width:{$col_width}%'>
	<div class='tfw-input'>
		<label for='$id'>
			<span class='tfw-label' title='$field->label'>$field_name</span>
			<input id='$id' name='$id' type='number' min='0' max='100' value='$col_width'>
		</label>
	</div>
";
			if($is_fieldset) {
				// Open fieldset
				$markup .= "<div class='tfw-fieldset'>";
			} else {
				$markup .= "</div>";
			}
		}
		$markup .= "</div>";
		
		/* @var InputfieldMarkup $f */
		$f = $this->wire()->modules->InputfieldMarkup;
		$f->name = 'inputfield_widths';
		$f->label = $this->_('Field widths');
		$f->value = $markup;
		if($this->tfw_collapsed) $f->collapsed = Inputfield::collapsedYes;
		$fg_fields = $form->getChildByName('fieldgroup_fields');
		$form->insertAfter($f, $fg_fields);

		// Load stylesheet
		$config = $this->wire()->config;
		$info = $this->getModuleInfo();
		$version = $info['version'];
		$config->styles->add($config->urls->$this . "{$this}.css?v=$version");
	}

	/**
	 * Apply field widths
	 *
	 * @param HookEvent $event
	 */
	protected function applyWidths(HookEvent $event) {
		$template = $this->getTemplate();
		$fieldgroup = $template->fieldgroup;
		foreach($this->wire()->input->post as $key => $value) {
			if(substr($key, 0, 4) !== 'tfw_') continue;
			$field_name = substr($key, 4);
			$col_width = (int) $value;
			$f = $fieldgroup->getFieldContext($field_name);
			if(!$f || $f->columnWidth === $col_width || (!$f->columnWidth && $col_width === 100)) continue;
			$f->columnWidth = $col_width;
			$this->wire()->fields->saveFieldgroupContext($f, $fieldgroup);
		}
	}

	/**
	 * Get template from ID in $input
	 *
	 * @return Template|null
	 */
	protected function getTemplate() {
		$template_id = (int) $this->wire()->input->post->id ?: (int) $this->wire()->input->get->id;
		return $this->wire()->templates->get($template_id);
	}

	/**
	 * Config inputfields
	 *
	 * @param InputfieldWrapper $inputfields
	 */
	public function getModuleConfigInputfields($inputfields) {
		/* @var InputfieldRadios $f */
		$f = $this->wire()->modules->InputfieldRadios;
		$f_name = 'tfw_collapsed';
		$f->name = $f_name;
		$f->label = $this->_('Presentation of Template Field Widths field');
		$f->addOption(1, $this->_('Collapsed'));
		$f->addOption(0, $this->_('Open'));
		$f->optionColumns = 1;
		$f->value = $this->$f_name;
		$inputfields->add($f);
	}
	
}
